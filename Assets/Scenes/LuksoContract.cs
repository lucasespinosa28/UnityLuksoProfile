using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Unity.Rpc;
using Account = Nethereum.Web3.Accounts.Account;
using Nethereum.Hex.HexConvertors.Extensions;
using System.Text;
using UnityEngine.UIElements;
using static UnityEngine.ParticleSystem;
using UnityEngine.Networking;
using System;

public class LuksoContract : MonoBehaviour
{
    // Start is called before the first frame update
    [SerializeField]
    string RpcUrl = "https://rpc.l16.lukso.network";
   
    public IEnumerator getProfileUrl(Label label)
    {
        var encode = new Nethereum.ABI.ABIEncode();
        var getDataFunction = new GetData1Function()
        {
            DataKey = encode.GetSha3ABIEncodedPacked("LSP3Profile")
        };
        var queryRequest = new QueryUnityRequest<GetData1Function, GetData1OutputDTO>(RpcUrl, PlayerPrefs.GetString("Address"));
        yield return queryRequest.Query(getDataFunction, PlayerPrefs.GetString("ProfileAddress"));
        var dtoResult = queryRequest.Result;
        byte[] profileUrl = dtoResult.DataValue;
        var ipfsUrl = Encoding.UTF8.GetString(profileUrl).Substring(41);

        using (UnityWebRequest request = UnityWebRequest.Get($"https://ipfs.io/ipfs/{ipfsUrl}"))
        {
            request.SetRequestHeader("Content-Type", "application/json");
            yield return request.SendWebRequest();
            switch (request.result)
            {
                case UnityWebRequest.Result.ConnectionError:
                case UnityWebRequest.Result.DataProcessingError:
                    Debug.LogError($"Error: {request.error}");
                    Debug.LogError(request.downloadHandler.text);
                    break;
                case UnityWebRequest.Result.ProtocolError:
                    Debug.LogError($"HTTP Error: {request.error}");
                    Debug.LogError(request.downloadHandler.text);
                    break;
                case UnityWebRequest.Result.Success:
                    var TextResult = request.downloadHandler.text;
                    var objects = JsonUtility.FromJson<ProfileMetadata>(TextResult);
                    Debug.Log(objects.LSP3Profile.name);
                    PlayerPrefs.SetString("LSP3Profile.name", objects.LSP3Profile.name);
                    Debug.Log($"Welcome back,{objects.LSP3Profile.name}");
                    label.text = $"Welcome back,{objects.LSP3Profile.name}";
                    PlayerPrefs.SetString("LSP3Profile.description", objects.LSP3Profile.description);
                    PlayerPrefs.SetString("LSP3Profile.backgroundImage", objects.LSP3Profile.backgroundImage[0].url);
                    PlayerPrefs.SetString("LSP3Profile.profileImage", objects.LSP3Profile.profileImage[0].url);
                    break;
            }
            request.Dispose();

        }
    }
    public void UpdateProfile(
        string _name,
        string _description,
        string ipfsProfile,
        string hashProfile,
        string ipfsBackground,
        string hashBackground)
    {
        StartCoroutine(setProfile(_name, _description, ipfsProfile, hashProfile, ipfsBackground, hashBackground));
    }
    public IEnumerator setProfile(
        string _name,
        string _description,
        string ipfsProfile,
        string hashProfile,
        string ipfsBackground,
        string hashBackground)
    {
        var encode = new Nethereum.ABI.ABIEncode();
        var hashJson = JSONURL.EncodeJSONURL(_name, _description, ipfsProfile, hashProfile, ipfsBackground, hashBackground).Item2;
        Debug.Log(hashJson);
        var setData1Function = new SetData1Function()
        {
            DataKey = encode.GetSha3ABIEncodedPacked("LSP3Profile"),
            DataValue = hashJson.HexToByteArray()
        };
        var transactionSetProfileRequest = new TransactionSignedUnityRequest(RpcUrl, PlayerPrefs.GetString("key"), 2828);
        yield return transactionSetProfileRequest.SignAndSendTransaction(setData1Function, PlayerPrefs.GetString("ProfileAddress"));
        var transactionTransferHash = transactionSetProfileRequest.Result;

        Debug.Log("Transfer txn hash:" + transactionTransferHash);
        var transactionReceiptPolling = new TransactionReceiptPollingRequest(RpcUrl);
        yield return transactionReceiptPolling.PollForReceipt(transactionTransferHash, 2);
        var transferReceipt = transactionReceiptPolling.Result;
        Debug.Log(transferReceipt.Status);
    }
    public IEnumerator DeployContract(TextField textField = null)
    {
        var transactionRequest = new TransactionSignedUnityRequest(RpcUrl, PlayerPrefs.GetString("key"), 2828);
        var upDeployment = new UpDeployment
        {
            NewOwner = PlayerPrefs.GetString("Address")
        };
        //upDeployment.Gas = 30_000_000;
        yield return transactionRequest.SignAndSendDeploymentContractTransaction<UpDeployment>(upDeployment);
        if (transactionRequest.Exception != null)
        {
            Debug.Log(transactionRequest.Exception.Message);
            yield break;
        }
        var transactionHash = transactionRequest.Result;
        Debug.Log("Deployment transaction hash:" + transactionHash);

        //create a poll to get the receipt when mined
        var transactionReceiptPolling = new TransactionReceiptPollingRequest(RpcUrl);

        //checking every 2 seconds for the receipt
        yield return transactionReceiptPolling.PollForReceipt(transactionHash, 2);

        var deploymentReceipt = transactionReceiptPolling.Result;

        Debug.Log("Deployment contract address:" + deploymentReceipt.ContractAddress);
        PlayerPrefs.SetString("ProfileAddress", deploymentReceipt.ContractAddress);
        if (textField != null)
        {
            textField.value = deploymentReceipt.ContractAddress;
        }
    }
    public void Deploy(TextField textField)
    {
        StartCoroutine(DeployContract(textField));
    }
    public void ProfileUrl(Label label = null)
    {
        StartCoroutine(getProfileUrl(label));
    }
    //private void Update()
    //{
    //    if (Input.GetKeyDown(KeyCode.Space))
    //    {
    //        Debug.Log("space");
    //        StartCoroutine(getProfileUrl());
    //    }
    //}
    // Update is called once per frame
    //void Update()
    //{
    //    if (Input.GetKeyDown(KeyCode.Space))
    //    {
    //        Debug.Log("space");
    //        StartCoroutine(DeployContract());
    //    }
    //    if(Input.GetKeyDown(KeyCode.LeftShift))
    //    {
    //        StartCoroutine(setProfile());
    //    }
    //    if (Input.GetKeyDown(KeyCode.RightShift)) {
    //        StartCoroutine(getProfileUrl());
    //    }
    //    if( Input.GetKeyDown(KeyCode.Q))
    //    {
    //        StartCoroutine(setData("lhhama","blue"));
    //    }
    //    if (Input.GetKeyDown(KeyCode.W))
    //    {
    //        StartCoroutine(getData("lhhama"));
    //    }

    //}

    partial class UpDeployment : UpDeploymentBase
    {
        public UpDeployment() : base(BYTECODE) { }
        public UpDeployment(string byteCode) : base(byteCode) { }
    }

    class UpDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "0x60806040526040516200257b3803806200257b8339810160408190526200002691620001eb565b806200003d816200008d60201b62000e8e1760201c565b5060408051808201909152600481526355f212eb60e11b602082015262000086907feafec4d89fa9619884b60000abe425d64acd861a49b8ddf5c0b6962110481f3890620000f4565b506200025a565b6000546001600160a01b03828116911614620000f157600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505b50565b60008281526001602090815260409091208251620001159284019062000145565b5060405182907fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b90600090a25050565b82805462000153906200021d565b90600052602060002090601f016020900481019282620001775760008555620001c2565b82601f106200019257805160ff1916838001178555620001c2565b82800160010185558215620001c2579182015b82811115620001c2578251825591602001919060010190620001a5565b50620001d0929150620001d4565b5090565b5b80821115620001d05760008155600101620001d5565b600060208284031215620001fe57600080fd5b81516001600160a01b03811681146200021657600080fd5b9392505050565b600181811c908216806200023257607f821691505b602082108114156200025457634e487b7160e01b600052602260045260246000fd5b50919050565b612311806200026a6000396000f3fe6080604052600436106100d25760003560e01c806354f6127f1161007f5780637f23690c116100595780637f23690c146102405780638da5cb5b14610260578063e30c397814610292578063f2fde38b146102b2576100d2565b806354f6127f146101f85780636bb56a1414610218578063715018a61461022b576100d2565b806344c028fe116100b057806344c028fe146101965780634e3e6e9c146101b65780634e71e0c8146101e3576100d2565b806301ffc9a71461010857806314a6e2931461013d5780631626ba7e1461015d575b341561010657604051349033907f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf73605666423349390600090a35b005b34801561011457600080fd5b50610128610123366004611e76565b6102d2565b60405190151581526020015b60405180910390f35b34801561014957600080fd5b50610106610158366004611cef565b610399565b34801561016957600080fd5b5061017d610178366004611e2f565b610472565b6040516001600160e01b03199091168152602001610134565b6101a96101a4366004611f40565b610582565b60405161013491906120c3565b3480156101c257600080fd5b506101d66101d1366004611cba565b610c16565b6040516101349190612048565b3480156101ef57600080fd5b50610106610cca565b34801561020457600080fd5b506101a9610213366004611dca565b610cd4565b6101a9610226366004611de3565b610cdf565b34801561023757600080fd5b50610106610e30565b34801561024c57600080fd5b5061010661025b366004611e2f565b610e42565b34801561026c57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610134565b34801561029e57600080fd5b5060025461027a906001600160a01b031681565b3480156102be57600080fd5b506101066102cd366004611c9f565b610e58565b60006001600160e01b03198216630b135d3f60e11b148061031c57506001600160e01b031982167f9a3bfe8800000000000000000000000000000000000000000000000000000000145b8061035057506001600160e01b031982167f6bb56a1400000000000000000000000000000000000000000000000000000000145b8061038457506001600160e01b031982167fd225f16000000000000000000000000000000000000000000000000000000000145b80610393575061039382610f00565b92915050565b6103a1610f3e565b805182511461041d5760405162461bcd60e51b815260206004820152602660248201527f4b657973206c656e677468206e6f7420657175616c20746f2076616c7565732060448201527f6c656e677468000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b825181101561046d5761046583828151811061043e5761043e612299565b602002602001015183838151811061045857610458612299565b6020026020010151610fa7565b600101610420565b505050565b6000806104876000546001600160a01b031690565b90506001600160a01b0381163b15610542576104aa81630b135d3f60e11b610ff6565b6104bc576001600160e01b031961053a565b604051630b135d3f60e11b81526001600160a01b03821690631626ba7e906104ea90879087906004016120aa565b60206040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611e93565b915050610393565b61054c84846110f8565b6001600160a01b0316816001600160a01b031614610572576001600160e01b031961053a565b50630b135d3f60e11b9392505050565b606061058c610f3e565b60005a90508661069257844710156105f55760405162461bcd60e51b815260206004820152602660248201527f455243373235583a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610414565b610638868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525087925061111c915050565b9150846001600160a01b038716887f4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e610671878961219c565b6040516001600160e01b0319909116815260200160405180910390a4610c0c565b600387141561075157841561070f5760405162461bcd60e51b815260206004820152603860248201527f455243373235583a2063616e6e6f74207472616e736665722076616c7565207760448201527f697468206f7065726174696f6e2053544154494343414c4c00000000000000006064820152608401610414565b6106388685858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506111ce915050565b60048714156108105784156107ce5760405162461bcd60e51b815260206004820152603a60248201527f455243373235583a2063616e6e6f74207472616e736665722076616c7565207760448201527f697468206f7065726174696f6e2044454c454741544543414c4c0000000000006064820152608401610414565b6106388685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611272915050565b60018714156109b4576001600160a01b038616156108a25760405162461bcd60e51b815260206004820152604360248201527f455243373235583a20435245415445206f7065726174696f6e7320726571756960448201527f726520746865207265636569766572206164647265737320746f20626520656d60648201526270747960e81b608482015260a401610414565b844710156109015760405162461bcd60e51b815260206004820152602660248201527f455243373235583a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610414565b60006109438686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112cc92505050565b6040516bffffffffffffffffffffffff19606083901b166020820152909150603401604051602081830303815290604052925085816001600160a01b0316897f01c42bd7e97a66166063b02fce6924e6656b6c2c61966630165095c4fb0b7b2f60405160405180910390a450610c0c565b6002871415610bc4576001600160a01b03861615610a465760405162461bcd60e51b815260206004820152604360248201527f455243373235583a20435245415445206f7065726174696f6e7320726571756960448201527f726520746865207265636569766572206164647265737320746f20626520656d60648201526270747960e81b608482015260a401610414565b84471015610aa55760405162461bcd60e51b815260206004820152602660248201527f455243373235583a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610414565b6000610af385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610aee925060209150889050612185565b611380565b90506000610b4286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610b3d91506020905089612185565b6113e6565b90506000610b51888484611510565b6040516bffffffffffffffffffffffff19606083901b166020820152909150603401604051602081830303815290604052945087816001600160a01b03168b7f01c42bd7e97a66166063b02fce6924e6656b6c2c61966630165095c4fb0b7b2f60405160405180910390a4505050610c0c565b60405162461bcd60e51b815260206004820152601460248201527f57726f6e67206f7065726174696f6e20747970650000000000000000000000006044820152606401610414565b5095945050505050565b6060815167ffffffffffffffff811115610c3257610c326122af565b604051908082528060200260200182016040528015610c6557816020015b6060815260200190600190039081610c505790505b50905060005b8251811015610cc457610c96838281518110610c8957610c89612299565b602002602001015161161a565b828281518110610ca857610ca8612299565b6020026020010181905250610cbd8160010190565b9050610c6b565b50919050565b610cd26116bc565b565b60606103938261161a565b60606000610d0c7f0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b4761161a565b90506014815110610dcc576000610d22826121cc565b60601c9050610d3881635122dded60e11b610ff6565b15610dca57604051635122dded60e11b81526001600160a01b0382169063a245bbda90610d7190339034908b908b908b90600401612019565b600060405180830381600087803b158015610d8b57600080fd5b505af1158015610d9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc79190810190611eb0565b92505b505b81604051610dda9190611ffd565b604051809103902085336001600160a01b03167f9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2348888604051610e20939291906120d6565b60405180910390a4509392505050565b610e38610f3e565b610cd26000610e8e565b610e4a610f3e565b610e548282610fa7565b5050565b610e60610f3e565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b50565b6000546001600160a01b03828116911614610e8b57600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160e01b031982167f714df77c000000000000000000000000000000000000000000000000000000001480610393575061039382611770565b33610f516000546001600160a01b031690565b6001600160a01b031614610cd25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610414565b60008281526001602090815260409091208251610fc692840190611ae5565b5060405182907fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b90600090a25050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090611072908690611ffd565b6000604051808303818686fa925050503d80600081146110ae576040519150601f19603f3d011682016040523d82523d6000602084013e6110b3565b606091505b50915091506020815110156110ce5760009350505050610393565b8180156110ee57506000818060200190518101906110ec9190611f27565b115b9695505050505050565b600080600061110785856117be565b9150915061111481611804565b509392505050565b6060600080866001600160a01b031684878760405161113b9190611ffd565b600060405180830381858888f193505050503d8060008114611179576040519150601f19603f3d011682016040523d82523d6000602084013e61117e565b606091505b50915091506111c382826040518060400160405280601581526020017f455243373235583a20556e6b6e6f77204572726f7200000000000000000000008152506119bf565b979650505050505050565b6060600080856001600160a01b031684866040516111ec9190611ffd565b6000604051808303818686fa925050503d8060008114611228576040519150601f19603f3d011682016040523d82523d6000602084013e61122d565b606091505b50915091506110ee82826040518060400160405280601581526020017f455243373235583a20556e6b6e6f77204572726f7200000000000000000000008152506119bf565b6060600080856001600160a01b031684866040516112909190611ffd565b6000604051808303818686f4925050503d8060008114611228576040519150601f19603f3d011682016040523d82523d6000602084013e61122d565b60008151600014156113205760405162461bcd60e51b815260206004820152601d60248201527f6e6f20636f6e74726163742062797465636f64652070726f76696465640000006044820152606401610414565b81516020830184f090506001600160a01b0381166103935760405162461bcd60e51b815260206004820152601960248201527f436f756c64206e6f74206465706c6f7920636f6e7472616374000000000000006044820152606401610414565b600061138d82602061216d565b835110156113dd5760405162461bcd60e51b815260206004820152601560248201527f746f427974657333325f6f75744f66426f756e647300000000000000000000006044820152606401610414565b50016020015190565b6060816113f481601f61216d565b10156114425760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610414565b61144c828461216d565b8451101561149c5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610414565b6060821580156114bb5760405191506000825260208201604052611505565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156114f45780518352602092830192016114dc565b5050858452601f01601f1916604052505b5090505b9392505050565b600080844710156115635760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401610414565b82516115b15760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610414565b8383516020850187f590506001600160a01b0381166116125760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610414565b949350505050565b600081815260016020526040902080546060919061163790612238565b80601f016020809104026020016040519081016040528092919081815260200182805461166390612238565b80156116b05780601f10611685576101008083540402835291602001916116b0565b820191906000526020600020905b81548152906001019060200180831161169357829003601f168201915b50505050509050919050565b6002546001600160a01b0316331461173c5760405162461bcd60e51b815260206004820152602c60248201527f4f776e61626c65436c61696d3a2063616c6c6572206973206e6f74207468652060448201527f70656e64696e674f776e657200000000000000000000000000000000000000006064820152608401610414565b600254611751906001600160a01b0316610e8e565b6002805473ffffffffffffffffffffffffffffffffffffffff19169055565b60006001600160e01b031982167f44c028fe00000000000000000000000000000000000000000000000000000000148061039357506301ffc9a760e01b6001600160e01b0319831614610393565b6000808251604114156117f55760208301516040840151606085015160001a6117e9878285856119f8565b945094505050506117fd565b506000905060025b9250929050565b600081600481111561181857611818612283565b14156118215750565b600181600481111561183557611835612283565b14156118835760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610414565b600281600481111561189757611897612283565b14156118e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610414565b60038160048111156118f9576118f9612283565b14156119525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610414565b600481600481111561196657611966612283565b1415610e8b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610414565b606083156119ce575081611509565b8251156119de5782518084602001fd5b8160405162461bcd60e51b815260040161041491906120c3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611a2f5750600090506003611adc565b8460ff16601b14158015611a4757508460ff16601c14155b15611a585750600090506004611adc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611aac573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611ad557600060019250925050611adc565b9150600090505b94509492505050565b828054611af190612238565b90600052602060002090601f016020900481019282611b135760008555611b59565b82601f10611b2c57805160ff1916838001178555611b59565b82800160010185558215611b59579182015b82811115611b59578251825591602001919060010190611b3e565b50611b65929150611b69565b5090565b5b80821115611b655760008155600101611b6a565b80356001600160a01b0381168114611b9557600080fd5b919050565b600082601f830112611bab57600080fd5b81356020611bc0611bbb83612121565b6120f0565b80838252828201915082860187848660051b8901011115611be057600080fd5b60005b85811015611bff57813584529284019290840190600101611be3565b5090979650505050505050565b60008083601f840112611c1e57600080fd5b50813567ffffffffffffffff811115611c3657600080fd5b6020830191508360208285010111156117fd57600080fd5b600082601f830112611c5f57600080fd5b8135611c6d611bbb82612145565b818152846020838601011115611c8257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611cb157600080fd5b61150982611b7e565b600060208284031215611ccc57600080fd5b813567ffffffffffffffff811115611ce357600080fd5b61161284828501611b9a565b60008060408385031215611d0257600080fd5b823567ffffffffffffffff80821115611d1a57600080fd5b611d2686838701611b9a565b9350602091508185013581811115611d3d57600080fd5b8501601f81018713611d4e57600080fd5b8035611d5c611bbb82612121565b8082825285820191508584018a878560051b8701011115611d7c57600080fd5b6000805b85811015611db757823588811115611d96578283fd5b611da48e8b838b0101611c4e565b8652509388019391880191600101611d80565b5050508096505050505050509250929050565b600060208284031215611ddc57600080fd5b5035919050565b600080600060408486031215611df857600080fd5b83359250602084013567ffffffffffffffff811115611e1657600080fd5b611e2286828701611c0c565b9497909650939450505050565b60008060408385031215611e4257600080fd5b82359150602083013567ffffffffffffffff811115611e6057600080fd5b611e6c85828601611c4e565b9150509250929050565b600060208284031215611e8857600080fd5b8135611509816122c5565b600060208284031215611ea557600080fd5b8151611509816122c5565b600060208284031215611ec257600080fd5b815167ffffffffffffffff811115611ed957600080fd5b8201601f81018413611eea57600080fd5b8051611ef8611bbb82612145565b818152856020838501011115611f0d57600080fd5b611f1e826020830160208601612208565b95945050505050565b600060208284031215611f3957600080fd5b5051919050565b600080600080600060808688031215611f5857600080fd5b85359450611f6860208701611b7e565b935060408601359250606086013567ffffffffffffffff811115611f8b57600080fd5b611f9788828901611c0c565b969995985093965092949392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452611fe9816020860160208601612208565b601f01601f19169290920160200192915050565b6000825161200f818460208701612208565b9190910192915050565b6001600160a01b03861681528460208201528360408201526080606082015260006111c3608083018486611fa8565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561209d57603f1988860301845261208b858351611fd1565b9450928501929085019060010161206f565b5092979650505050505050565b8281526040602082015260006116126040830184611fd1565b6020815260006115096020830184611fd1565b838152604060208201526000611f1e604083018486611fa8565b604051601f8201601f1916810167ffffffffffffffff81118282101715612119576121196122af565b604052919050565b600067ffffffffffffffff82111561213b5761213b6122af565b5060051b60200190565b600067ffffffffffffffff82111561215f5761215f6122af565b50601f01601f191660200190565b600082198211156121805761218061226d565b500190565b6000828210156121975761219761226d565b500390565b6001600160e01b031981358181169160048510156121c45780818660040360031b1b83161692505b505092915050565b805160208201516bffffffffffffffffffffffff1980821692919060148310156122005780818460140360031b1b83161693505b505050919050565b60005b8381101561222357818101518382015260200161220b565b83811115612232576000848401525b50505050565b600181811c9082168061224c57607f821691505b60208210811415610cc457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e8b57600080fdfea26469706673582212206f198537befbab371fd293f1b77abbc62b7d684a51454a09b37631e81e8f0bb764736f6c63430008070033";
        public UpDeploymentBase() : base(BYTECODE) { }
        public UpDeploymentBase(string byteCode) : base(byteCode) { }
        [Parameter("address", "newOwner", 1)]
        public virtual string NewOwner { get; set; }
    }

    public partial class SetDataFunction : SetDataFunctionBase { }

    [Function("setData")]
    public class SetDataFunctionBase : FunctionMessage
    {
        [Parameter("bytes32[]", "dataKeys", 1)]
        public virtual List<byte[]> DataKeys { get; set; }
        [Parameter("bytes[]", "dataValues", 2)]
        public virtual List<byte[]> DataValues { get; set; }
    }

    public partial class SetData1Function : SetData1FunctionBase { }

    [Function("setData")]
    public class SetData1FunctionBase : FunctionMessage
    {
        [Parameter("bytes32", "dataKey", 1)]
        public virtual byte[] DataKey { get; set; }
        [Parameter("bytes", "dataValue", 2)]
        public virtual byte[] DataValue { get; set; }
    }

    public partial class GetDataFunction : GetDataFunctionBase { }

    [Function("getData", "bytes[]")]
    public class GetDataFunctionBase : FunctionMessage
    {
        [Parameter("bytes32[]", "dataKeys", 1)]
        public virtual byte[] DataKeys { get; set; }
    }

    public partial class GetData1Function : GetData1FunctionBase { }

    [Function("getData", "bytes")]
    public class GetData1FunctionBase : FunctionMessage
    {
        [Parameter("bytes32", "dataKey", 1)]
        public virtual byte[] DataKey { get; set; }
    }
    public partial class GetDataOutputDTO : GetDataOutputDTOBase { }

    [FunctionOutput]
    public class GetDataOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("bytes[]", "dataValues", 1)]
        public virtual List<byte[]> DataValues { get; set; }
    }

    public partial class GetData1OutputDTO : GetData1OutputDTOBase { }

    [FunctionOutput]
    public class GetData1OutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("bytes", "dataValue", 1)]
        public virtual byte[] DataValue { get; set; }
    }
}
